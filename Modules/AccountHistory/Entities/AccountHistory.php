<?php

namespace Modules\AccountHistory\Entities;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;
use Modules\AccountHistory\Events\SendNotification;
use Modules\Level\Jobs\LevelJob;
use Modules\SwfteaMission\Jobs\SeasonPoint;
use Modules\UserSystem\Entities\User;

class AccountHistory extends Model
{
  protected $fillable = [
    'type',
    'creditor',
    'creditor_id',
    'message',
    'user_id',
    'old_value',
    'new_value',
  ];
  public $excluded_histories = ['Transfer', 'Lowcard Game', 'Cricket Game'];

  protected static function boot()
  {
    parent::boot(); // TODO: Change the autogenerated stub
    static::created(function ($history) {
      event(new SendNotification($history));
      if (!in_array($history->type, ['Transfer', 'Lowcard Game', 'Cricket Game'])) {
        if ($history->new_value < $history->old_value) {
          $profile = DB::table('profiles')->select(['spent_for_next_level', 'level_bar', 'today_spent_amount'])->where('user_id', '=', $history->user_id)->first();
          # Add to total spent credit today list
          $amount = $history->old_value - $history->new_value;
          $old_spend = $profile->spent_for_next_level;
          $todays_old_spend = $profile->today_spent_amount;
          $total_expenses = $old_spend + $amount;
          # Add for mentor merchant
          $user = DB::table('users')->select(['program_point'])->where('id', '=', $history->user_id)->first();
          $new_point = $user->program_point + (config('program.program_bar_rate') * $amount);
          if ($new_point < 1000) {
            DB::table('users')->where('id', '=', $history->user_id)->update([
              'program_point' => $new_point
            ]);
          }
          # mission
          dispatch(
            new SeasonPoint(
              'add points',
              $history->user_id,
              'Primary',
              'spend_credit',
              $amount)
          )->onQueue('low');
          # Add level bar for credit spend
          $level = DB::table('levels')->select(['value'])->where('user_id', '=', $history->user_id)->latest()->first();
          $max = getMaxCreditExpenseForLevel($level->value);
          if ($old_spend > $max) {
            $ca = 0;
            $na = $amount;
          } else {
            $mc = $max - $old_spend;
            if ($amount > $mc) {
              $ca = $mc;
              $na = $amount - $mc;
            } else {
              $ca = $amount;
              $na = 0;
            }
          }
          $increasing_bar = (getPrimaryCreditRate($level->value) * $ca) + (getSecondaryCreditRate($level->value) * $na);
          if ($increasing_bar > 0) {
            dispatch(new LevelJob('add bar', $history->user_id, (object)[
              'amount' => $increasing_bar,
              'credit' => $amount
            ]));
          }
        }
      }
    });
  }

  public function user()
  {
    return $this->belongsTo('\\Modules\\UserSystem\\Entities\\User');
  }
}
